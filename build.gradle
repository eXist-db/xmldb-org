import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'signing'
    id 'jacoco'
    id 'maven-publish'
    id "me.champeau.gradle.jmh" version "0.4.6"
    id 'net.nemerosa.versioning' version '2.8.2'
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

group = 'net.sf.xmldb-org'
version = '2.0.0-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    testCompile 'org.hamcrest:hamcrest:2.1'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.2'
    testCompile 'org.mockito:mockito-core:2.23.4'
    testCompile 'org.mockito:mockito-junit-jupiter:2.23.4'
    testCompile 'org.openjdk.jmh:jmh-core:1.21'
    
    testRuntime 'org.mockito:mockito-core:1.10.19'
    testRuntime 'org.junit.platform:junit-platform-runner:1.3.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

signing {
    required { project.hasProperty('signing.password') && !project.version.endsWith('-SNAPSHOT') }
    sign publishing.publications
}

jar {
    manifest {
        attributes 'Implementation-Title': 'XML:DB API specification',
                   'Implementation-Version': version,
                   'Build-Date': buildDate,
                   'Build-Time': buildTime,
                   'Build-Revision': versioning.info.commit,
                   'Automatic-Module-Name': "org.xmldb.api"
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}

jmh {
//    include = 'org\\.openjdk\\.jmh\\.samples\\.JMHSample_01_HelloWorld.*'
    humanOutputFile = null
    warmupIterations = 1
    iterations = 1
}

test {
    useJUnitPlatform()
    testLogging {
        events 'skipped'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name  = 'XML:DB API specification'
                description = 'XML:DB Initiative for XML Databases'
                url = 'https://github.com/xmldb-org/xmldb-api.git'
                scm {
                    connection = 'scm:git@github.com:xmldb-org/xmldb-api.git'
                    developerConnection = 'scm:git@github.com:xmldb-org/xmldb-api.git'
                    url = 'https://github.com/xmldb-org/xmldb-api.git'
                }
                licenses {
                    license {
                        name = 'The XML:DB Initiative Software License, Version 1.0'
                        url = 'https://github.com/xmldb-org/xmldb-api/raw/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'reinhapa'
                        name = 'Patrick Reinhart'
                        email = 'patrick@reini.net'
                    }
                    developer {
                        id = 'per_nyfelt'
                        name = 'Per Nyfelt'
                        email = 'per_nyfelt@users.sf.net'
                    }
                    developer {
                        id = 'walkabout'
                        name = 'Lars Martin'
                        email = 'walkabout@users.sf.net'
                    }
                }
            }
        }
    }
    repositories {
        if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}
